from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from dao.dao import UserDAO, ProductDao, PurchaseDao
from user.kbs import cart_kb, dell_cart_kb, main_user_kb, purchases_kb
from user.schemas import PurchaseIDModel, TelegramIDModel, UserModel, CartModel

cart_router = Router()

@cart_router.callback_query(F.data == "cart")
async def page_user_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # cart = await ProductDao.find_all(session=session_without_commit,
                                                #   filters=CartModel(id=call.from_user.id))
    # count_products = len(products_category)
    purchases = await UserDAO.get_cart(session=session_without_commit, telegram_id=call.from_user.id)
    logger.error(purchases)
    if not purchases:
        await call.message.edit_text(
            text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
        return
    product_text = (
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    cart_total=0
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for purchase in purchases:

        logger.error(purchase)
        product = purchase.product
        logger.error(product)
        # file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"

        product_text += (
            f"üîπ {product.name} - {product.price} ‚ÇΩ\n"
        )
        cart_total +=product.price
    product_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"—Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {cart_total}‚ÇΩ\n")

    await call.message.edit_text(
        text=product_text,
        reply_markup=cart_kb()
    )

@cart_router.callback_query(F.data == 'edit_cart')
async def edit_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã')
    all_items = await UserDAO.get_cart(session=session_without_commit, telegram_id=call.from_user.id)

    for item in all_items:
        product = item.product
        product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <b>{product.name}</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>{product.description}</b>\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–∫—Ä—ã—Ç–æ–µ):</b>\n\n<b>{product.hidden_content}</b>\n\n')
        await call.message.answer(text=product_text, reply_markup=dell_cart_kb(product.id))
    # await call.message.answer("--", reply_markup=)

@cart_router.callback_query(F.data.startswith('dell_item_'))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    item_id = int(call.data.split('_')[-1])
    await PurchaseDao.delete(session=session_with_commit, filters=PurchaseIDModel(id=item_id))
    await call.message.edit_text(f"–¢–æ–≤–∞—Ä —Å ID {item_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()