from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from dao.dao import TasteDao, UserDAO, ProductDao, PurchaseDao
from user.kbs import cart_kb, dell_cart_kb, main_user_kb, purchases_kb
from user.schemas import ItemCartData, ProductIDModel, PurchaseIDModel, TasteIDModel, TelegramIDModel, UserModel, CartModel

cart_router = Router()

# @cart_router.callback_query(F.data.startswith('taste_cart_'))
# async def add_in_cart_taste(call: CallbackQuery, session_with_commit: AsyncSession):
#     user_info = await UserDAO.find_one_or_none(
#         session=session_with_commit,
#         filters=TelegramIDModel(telegram_id=call.from_user.id)
#     )
#     _, taste_id = call.data.split('_')
#     taste_info = await TasteDao.find_one_or_none(
#         session=session_with_commit,
#         filters=TasteIDModel(id=taste_id)
#     )
#     product_id = await ProductDao.find_one_or_none(
#         session=session_with_commit,
#         filters=ProductIDModel(id=taste_info.product_id)
#     )
#     user_id = call.from_user.id
#     payment_data = {
#         'user_id': user_id,
#         'product_id': int(product_id),
#         #taste
#         'status': 'NEW',
#     }
#     logger.error(payment_data)
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     await PurchaseDao.add(session=session_with_commit, values=ItemCartData(**payment_data))

@cart_router.callback_query(F.data.startswith('ctaste_'))
async def add_in_cart_taste(call: CallbackQuery, session_with_commit: AsyncSession):
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=call.from_user.id)
    )
    _, taste_id = call.data.split('_')
    taste_info = await TasteDao.find_one_or_none(
        session=session_with_commit,
        filters=TasteIDModel(id=taste_id)
    )
    product_info = await ProductDao.find_one_or_none(
        session=session_with_commit,
        filters=ProductIDModel(id=taste_info.product_id)
    )
    product_id = product_info.id
    user_id = call.from_user.id
    payment_data = {
        'user_id': user_id,
        'product_id': int(product_id),
        #taste
        'status': 'NEW',
    }
    logger.error(payment_data)
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await PurchaseDao.add(session=session_with_commit, values=ItemCartData(**payment_data))

# @catalog_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
@cart_router.callback_query(F.data.startswith('cart_'))
async def add_in_cart(call: CallbackQuery, session_with_commit: AsyncSession):
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=call.from_user.id)
    )
    _, product_id, taste_id = call.data.split('_')
    user_id = call.from_user.id
    logger.error(taste_id)
    payment_data = {
        'user_id': user_id,
        'product_id': int(product_id),
        #taste
        'status': 'NEW',
    }
    logger.error(payment_data)
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await PurchaseDao.add(session=session_with_commit, values=ItemCartData(**payment_data))
    # product_data = await ProductDao.find_one_or_none_by_id(session=session_with_commit, data_id=int(product_id))

    # # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    # for admin_id in settings.ADMIN_IDS:
    #     try:
    #         username = message.from_user.username
    #         user_info = f"@{username} ({message.from_user.id})" if username else f"c ID {message.from_user.id}"

    #         await bot.send_message(
    #             chat_id=admin_id,
    #             text=(
    #                 f"üí≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä <b>{product_data.name}</b> (ID: {product_id}) "
    #                 f"–∑–∞ <b>{product_data.price} ‚ÇΩ</b>."
    #             )
    #         )
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

    # # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product_data.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"
    # product_text = (
    #     f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
    #     f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
    #     f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #     f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>{product_data.name}</b>\n"
    #     f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.description}</i>\n"
    #     f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n"
    #     f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.hidden_content}</i>\n"
    #     f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #     f"{file_text}\n\n"
    #     f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ.</b>"
    # )

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # if product_data.file_id:
    #     await message.answer_document(
    #         document=product_data.file_id,
    #         caption=product_text,
    #         reply_markup=main_user_kb(message.from_user.id)
    #     )
    # else:
    #     await message.edit_text(
    #         text=product_text,
    #         reply_markup=main_user_kb(message.from_user.id)
    #     )

@cart_router.callback_query(F.data == "cart")
async def page_user_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # cart = await ProductDao.find_all(session=session_without_commit,
                                                #   filters=CartModel(id=call.from_user.id))
    # count_products = len(products_category)
    purchases = await UserDAO.get_cart(session=session_without_commit, telegram_id=call.from_user.id)
    logger.error(purchases)
    if not purchases:
        await call.message.edit_text(
            text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
        return
    product_text = (
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    cart_total=0
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for purchase in purchases:

        logger.error(purchase)
        product = purchase.product
        logger.error(product)
        # file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"

        product_text += (
            f"üîπ {product.name} - {product.price} ‚ÇΩ\n"
        )
        cart_total +=product.price
    product_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"—Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {cart_total}‚ÇΩ\n")

    await call.message.edit_text(
        text=product_text,
        reply_markup=cart_kb()
    )

@cart_router.callback_query(F.data == 'edit_cart')
async def edit_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã')
    all_items = await UserDAO.get_cart(session=session_without_commit, telegram_id=call.from_user.id)

    for item in all_items:
        product = item.product
        product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <b>{product.name}</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>{product.description}</b>\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n')
        await call.message.answer(text=product_text, reply_markup=dell_cart_kb(product.id))
    # await call.message.answer("--", reply_markup=)

@cart_router.callback_query(F.data.startswith('item_dell_'))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    item_id = int(call.data.split('_')[-1])
    await PurchaseDao.delete(session=session_with_commit, filters=PurchaseIDModel(id=item_id))
    await call.message.edit_text(f"–¢–æ–≤–∞—Ä —Å ID {item_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()