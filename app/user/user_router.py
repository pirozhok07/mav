from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from dao.dao import PurchaseDao, UserDAO, ProductDao, TasteDao
from user.kbs import cart_kb, main_user_kb, purchases_kb
from user.schemas import PurchaseModel, PurchaseUserIDModel, TelegramIDModel, UserModel

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )
    if user_info:
        return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=main_user_kb(user_id)
        )

    values = UserModel(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await UserDAO.add(session=session_with_commit, values=values)
    await message.answer(f"üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=main_user_kb(user_id))

@user_router.callback_query(F.data == "home")
async def page_home(call: CallbackQuery):
    await call.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return await call.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=main_user_kb(call.from_user.id)
    )

@user_router.callback_query(F.data == "about")
async def page_about(call: CallbackQuery):
    await call.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    await call.message.edit_text(
        text=(
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–æ–≤!\n\n"
            "–¢–æ–ª—å–∫–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n\n"
            "–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –≥. –ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥.\n"
            "–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 50‚ÇΩ. –ü—Ä–∏ —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞ –æ—Ç 500‚ÇΩ –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞–Ω–æ.\n\n"
            "–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–∏ –∫—É—Ä—å–µ—Ä–µ.\n\n"
            "–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
        ),
        reply_markup=call.message.reply_markup
    )

@user_router.callback_query(F.data == "my_profile")
async def page_profil(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    statistic = await UserDAO.get_purchase_statistics(
        session=session_without_commit,
        telegram_id=call.from_user.id
    )
    
    total_amount = statistic.get("total_amount", 0)
    total_purchases = statistic.get("total_purchases", 0)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
    text=''
    if total_purchases == 0:
        await call.message.edit_text(
            text="üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
    else:
        text = (
            f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_purchases}</b>\n"
            f"–ò—Ç–æ–≥–æ: <b>{total_amount}‚ÇΩ</b>\n\n"
            # "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫?"
        )
        await call.message.edit_text(
            text=text,
            reply_markup=purchases_kb()
        )
    purchases= await PurchaseDao.get_purchases(session=session_without_commit, telegram_id=call.from_user.id)
    if purchases is not None:
        logger.error(purchases)
        # for purchase in purchases:
        #     if (purchase.status=="NEW")


# @user_router.callback_query(F.data == "purchases")
# async def page_user_purchases(call: CallbackQuery, session_without_commit: AsyncSession):
#     await call.answer("–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")

#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     purchases = await PurchaseDao.get_purchases(session=session_without_commit, telegram_id=call.from_user.id)
#     if not purchases:
#         await call.message.edit_text(
#             text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
#                  f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
#             reply_markup=main_user_kb(call.from_user.id)
#         )
#         return
#     product_text = (
#             f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö:</b>\n"
#             f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
#     # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
#     for purchase in purchases:
#         products = purchase.goods_id.split(', ')
#         for good in products:
#             if good.find('_') != -1:
#                 product_id, taste_id = good.split('_')
#                 taste = await TasteDao.find_one_or_none_by_id(session=session_without_commit, data_id=taste_id)
#                 product = await ProductDao.find_one_or_none_by_id(session=session_without_commit, data_id=product_id)
#                 product_text += (f"üîπ {product.name} ({taste.taste_name})\n")
#             else: 
#                 product = await ProductDao.find_one_or_none_by_id(session=session_without_commit, data_id=good)
#                 product_text += (f"üîπ {product.name}\n")
#         if(purchase.status == "WAIT"): text_status = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
#         elif(purchase.status == "CONFIRM"): text_status = "–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏"
#         elif(purchase.status == "DONE"): text_status = "–í—ã–ø–æ–ª–Ω–µ–Ω"

#         product_text += (
#                 f"\n<b>–∏—Ç–æ–≥–æ:</b> {purchase.total}‚ÇΩ\n"
#                 f"<b>–¥–∞—Ç–∞:</b> {purchase.date}\n"
#                 f"<b>–∞–¥—Ä–µ—Å—Å:</b> {purchase.adress}\n"
#                 f"<b>—Å—Ç–∞—Ç—É—Å:</b> {text_status}\n"
#                 f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

#     await call.message.edit_text(
#         text=product_text,
#         reply_markup=main_user_kb(call.from_user.id)
#     )

@user_router.callback_query(F.data == "cart")
async def page_user_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")

    user_id = call.from_user.id
    purchase = await PurchaseDao.find_one_or_none(
        session=session_without_commit,
        filters=PurchaseModel(user_id=user_id,
                              status="NEW")
    )

    if not purchase:
        await call.message.edit_text(
            text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
        return
    
    purchases = purchase.goods_id.split(', ')
    product_text = (
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for good in purchases:
        if good.find('_') != -1:
            product_id, taste_id = good.split('_')
            taste = await TasteDao.find_one_or_none_by_id(session=session_without_commit, data_id=taste_id)
            product = await ProductDao.find_one_or_none_by_id(session=session_without_commit, data_id=product_id)
            product_text += (f"üîπ {product.name} ({taste.taste_name}) - {product.price} ‚ÇΩ\n")
        else: 
            product = await ProductDao.find_one_or_none_by_id(session=session_without_commit, data_id=good)
            product_text += (f"üîπ {product.name} - {product.price} ‚ÇΩ\n")

    product_text += (f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    if purchase.total < 500 : 
        product_text += (f"–ò—Ç–æ–≥–æ: {purchase.total+50}‚ÇΩ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏\n")
    else:
        product_text += (f"–ò—Ç–æ–≥–æ: {purchase.total}‚ÇΩ. –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n")

    await call.message.edit_text(
        text=product_text,
        reply_markup=cart_kb()
    )