from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from dao.dao import UserDAO, ProductDao
from user.kbs import cart_kb, main_user_kb, purchases_kb
from user.schemas import TelegramIDModel, UserModel, CartModel

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )
    if user_info:
        return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=main_user_kb(user_id)
        )

    values = UserModel(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await UserDAO.add(session=session_with_commit, values=values)
    await message.answer(f"üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=main_user_kb(user_id))

@user_router.callback_query(F.data == "home")
async def page_home(call: CallbackQuery):
    await call.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return await call.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=main_user_kb(call.from_user.id)
    )

@user_router.callback_query(F.data == "about")
async def page_about(call: CallbackQuery):
    await call.answer("–û –º–∞–≥–∞–∑–∏–Ω–µ")
    await call.message.edit_text(
        text=(
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—á–µ–±–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!\n\n"
            "üöÄ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ –•–∞–±—Ä–µ.\n\n"
            "üë®‚Äçüíª –ê–≤—Ç–æ—Ä: –Ø–∫–æ–≤–µ–Ω–∫–æ –ê–ª–µ–∫—Å–µ–π\n\n"
            "üõçÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω–∞, "
            "–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n"
            "üìö –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤ "
            "–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏ –≤ Telegram.\n\n"
            "üí° –ò—Å—Å–ª–µ–¥—É–π—Ç–µ, —É—á–∏—Ç–µ—Å—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!\n\n"
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:\n\n"
            "–ö–∞—Ä—Ç–∞: 1111 1111 1111 1026\n"
            "–ì–æ–¥–µ–Ω –¥–æ: 12/26\n"
            "CVC-–∫–æ–¥: 000\n"
        ),
        reply_markup=call.message.reply_markup
    )

@user_router.callback_query(F.data == "my_profile")
async def page_about(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    purchases = await UserDAO.get_purchase_statistics(session=session_without_commit, telegram_id=call.from_user.id)
    total_amount = purchases.get("total_amount", 0)
    total_purchases = purchases.get("total_purchases", 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
    if total_purchases == 0:
        await call.message.edit_text(
            text="üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
    else:
        text = (
            f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <b>{total_purchases}</b>\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount}‚ÇΩ</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫?"
        )
        await call.message.edit_text(
            text=text,
            reply_markup=purchases_kb()
        )

@user_router.callback_query(F.data == "purchases")
async def page_user_purchases(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    purchases = await UserDAO.get_purchased_products(session=session_without_commit, telegram_id=call.from_user.id)

    if not purchases:
        await call.message.edit_text(
            text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
        return

    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for purchase in purchases:
        product = purchase.product
        file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"

        product_text = (
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{product.name}</i>\n"
            f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n"
            f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n"
            f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.hidden_content}</i>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{file_text}\n"
        )

        if product.file_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º
            await call.message.answer_document(
                document=product.file_id,
                caption=product_text,
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await call.message.edit_text(
                text=product_text,
            )

    await call.message.edit_text(
        text="üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
        reply_markup=main_user_kb(call.from_user.id)
    )

@user_router.callback_query(F.data == "cart")
async def page_user_cart(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # cart = await ProductDao.find_all(session=session_without_commit,
                                                #   filters=CartModel(id=call.from_user.id))
    # count_products = len(products_category)
    purchases = await UserDAO.get_cart(session=session_without_commit, telegram_id=call.from_user.id)
    # logger.error(purchases)
    if not purchases:
        await call.message.edit_text(
            text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=main_user_kb(call.from_user.id)
        )
        return
    product_text = (
            f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    cart_total=0
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for purchase in purchases:

        # logger.error(purchase)
        product = purchase.product
        # logger.error(product)
        # file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"

        product_text += (
            f"üîπ {product.name} - {product.price} ‚ÇΩ\n"
        )
        cart_total +=product.price
    product_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"—Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {cart_total}‚ÇΩ\n")

    await call.message.edit_text(
        text=product_text,
        reply_markup=cart_kb()
    )