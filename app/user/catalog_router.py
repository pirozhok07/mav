from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from config import bot, settings
from dao.dao import TasteDao, UserDAO, CategoryDao, ProductDao, PurchaseDao
from user.kbs import cancele_kb, main_user_kb, catalog_kb, product_kb, get_product_buy_kb, taste_kb
from user.schemas import TasteProductIDModel, TelegramIDModel, ProductCategoryIDModel, ItemCartData

catalog_router = Router()

@catalog_router.callback_query(F.data == "catalog")
async def page_catalog(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    catalog_data = await CategoryDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=catalog_kb(catalog_data)
    )

@catalog_router.callback_query(F.data.startswith("category_"))
async def page_catalog_products(call: CallbackQuery, session_without_commit: AsyncSession):
    category_id = int(call.data.split("_")[-1])
    product_data = await ProductDao.get_cart(session=session_without_commit, telegram_id=call.from_user.id)
    product_data = await ProductDao.find_one_or_none(session=session_without_commit,
                                                  filters=ProductCategoryIDModel(category_id=category_id, quantity=))
    count_products = len(product_data)
    if count_products:
        await call.message.edit_text(
            text=f"–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {count_products} —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=product_kb(product_data)
        )
        # for product in products_category:
        #     product_text = (
        #         f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product.name}\n\n"
        #         f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price} —Ä—É–±.\n\n"
        #         f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n\n"
        #         f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        #     )
        #     if product.category_id == 1:
        #         await call.message.answer(
        #             product_text,
        #             reply_markup=product_kb_1(product.id)
        #         )
        #     else:
        #         await call.message.answer(
        #             product_text,
        #             reply_markup=product_kb(product.id)
        #         )
            
        # await call.message.answer(".", reply_markup=cancele_kb())
    else:
        catalog_data = await CategoryDao.find_all(session=session_without_commit)
        await call.message.edit_text(text="–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=catalog_kb(catalog_data)) # –≤–æ–∑–≤—Ä–∞—Ç

@catalog_router.callback_query(F.data.startswith("taste_"))
async def show_taste(call: CallbackQuery, session_without_commit: AsyncSession):
    product_id = int(call.data.split("_")[-1])    
    taste_data = await TasteDao.find_all(session=session_without_commit, filters=TasteProductIDModel(product_id=product_id))
    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
        reply_markup=taste_kb(taste_data))
    
    # count_tastes = len(tastes_product)
    # if count_tastes:

    #     await call.message.edit_text(f"–£ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {count_tastes} –≤–∫—É—Å–æ–≤.")
    #     for taste in tastes_product:
    #         taste_text = (
    #             f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞:</b> {taste.taste_name}\n\n"
    #             f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    #         )
    #         await call.message.answer(
    #             taste_text,
    #             reply_markup=taste_kb(taste.id)
    #         )
    #     await call.message.answer("-----", reply_markup=cancele_kb())
    # else:
    #     await call.message.edit_text(text="–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:") # –≤–æ–∑–≤—Ä–∞—Ç   
# @catalog_router.callback_query(F.data.startswith('cart_'))
# async def process_about(call: CallbackQuery, session_without_commit: AsyncSession):
    # user_info = await UserDAO.find_one_or_none(
    #     session=session_without_commit,
    #     filters=TelegramIDModel(telegram_id=call.from_user.id)
    # )
    # _, product_id, price = call.data.split('_')
#     await bot.send_invoice(
#         chat_id=call.from_user.id,
#         title=f'–û–ø–ª–∞—Ç–∞ üëâ {price}‚ÇΩ',
#         description=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚ÇΩ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.',
#         payload=f"{user_info.id}_{product_id}",
#         provider_token=settings.PROVIDER_TOKEN,
#         currency='rub',
#         prices=[LabeledPrice(
#             label=f'–û–ø–ª–∞—Ç–∞ {price}',
#             amount=int(price) * 100
#         )],
#         reply_markup=get_product_buy_kb(price)
#     )
#     await call.message.delete()

@catalog_router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)




# @catalog_router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
# async def add_in_cart(message: Message, session_with_commit: AsyncSession):
#     payment_info = message.successful_payment
#     user_id, product_id = payment_info.invoice_payload.split('_')
#     payment_data = {
#         'user_id': int(user_id),
#         'payment_id': payment_info.telegram_payment_charge_id,
#         'price': payment_info.total_amount / 100,
#         'product_id': int(product_id)
#     }
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     await PurchaseDao.add(session=session_with_commit, values=PaymentData(**payment_data))
#     product_data = await ProductDao.find_one_or_none_by_id(session=session_with_commit, data_id=int(product_id))

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
#     for admin_id in settings.ADMIN_IDS:
#         try:
#             username = message.from_user.username
#             user_info = f"@{username} ({message.from_user.id})" if username else f"c ID {message.from_user.id}"

#             await bot.send_message(
#                 chat_id=admin_id,
#                 text=(
#                     f"üí≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä <b>{product_data.name}</b> (ID: {product_id}) "
#                     f"–∑–∞ <b>{product_data.price} ‚ÇΩ</b>."
#                 )
#             )
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

#     # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product_data.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"
#     product_text = (
#         f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
#         f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
#         f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
#         f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>{product_data.name}</b>\n"
#         f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.description}</i>\n"
#         f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n"
#         f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product_data.hidden_content}</i>\n"
#         f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
#         f"{file_text}\n\n"
#         f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ.</b>"
#     )

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     if product_data.file_id:
#         await message.answer_document(
#             document=product_data.file_id,
#             caption=product_text,
#             reply_markup=main_user_kb(message.from_user.id)
#         )
#     else:
#         await message.edit_text(
#             text=product_text,
#             reply_markup=main_user_kb(message.from_user.id)
#         )